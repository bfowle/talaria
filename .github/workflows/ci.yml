name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run at 00:00 UTC on Mondays
    - cron: '0 0 * * 1'

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1
  RUSTFLAGS: -D warnings

jobs:
  check:
    name: Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          components: rustfmt, clippy
      - name: Install LLVM and libclang
        run: |
          sudo apt-get update
          sudo apt-get install -y llvm-14 llvm-14-dev libclang-14-dev clang-14
          # Create unversioned symlinks for clang-sys auto-discovery
          sudo update-alternatives --install /usr/bin/llvm-config llvm-config /usr/bin/llvm-config-14 100
          sudo update-alternatives --install /usr/bin/clang clang /usr/bin/clang-14 100
      - name: Debug LLVM Installation
        run: |
          echo "=== Checking llvm-config ==="
          which llvm-config || echo "llvm-config not in PATH"
          llvm-config --version || echo "llvm-config failed"
          llvm-config --libdir || echo "llvm-config --libdir failed"
          echo ""
          echo "=== Available LLVM binaries ==="
          ls -la /usr/bin/llvm* || echo "No /usr/bin/llvm* files"
          echo ""
          echo "=== Available clang binaries ==="
          ls -la /usr/bin/clang* || echo "No /usr/bin/clang* files"
          echo ""
          echo "=== libclang libraries ==="
          find /usr/lib -name "libclang*.so*" 2>/dev/null || echo "No libclang*.so* found"
          echo ""
          echo "=== ldconfig libclang ==="
          ldconfig -p | grep libclang || echo "No libclang in ldconfig"
          echo ""
          echo "=== Environment ==="
          env | grep -i llvm || echo "No LLVM env vars"
          env | grep -i clang || echo "No CLANG env vars"
      - name: Check formatting
        run: cargo fmt --all -- --check
      - name: Run clippy
        env:
          LIBCLANG_PATH: /usr/lib/x86_64-linux-gnu
        run: cargo clippy --all-targets --all-features -- -D warnings
      - name: Check documentation
        env:
          LIBCLANG_PATH: /usr/lib/x86_64-linux-gnu
        run: cargo doc --all --no-deps --document-private-items

  test:
    name: Test Suite
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        rust: [stable, beta]
    steps:
      - uses: actions/checkout@v4
      - uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: ${{ matrix.rust }}
      - name: Install LLVM and libclang (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y llvm-14 llvm-14-dev libclang-14-dev clang-14
          # Create unversioned symlinks for clang-sys auto-discovery
          sudo update-alternatives --install /usr/bin/llvm-config llvm-config /usr/bin/llvm-config-14 100
          sudo update-alternatives --install /usr/bin/clang clang /usr/bin/clang-14 100
          # Verify installation
          llvm-config --version
          ldconfig -p | grep libclang
      - name: Install LLVM (macOS)
        if: runner.os == 'macOS'
        shell: bash
        run: |
          brew install llvm
          LLVM_PREFIX="$(brew --prefix llvm)"
          echo "LLVM_CONFIG_PATH=$LLVM_PREFIX/bin/llvm-config" >> $GITHUB_ENV
          echo "LIBCLANG_PATH=$LLVM_PREFIX/lib" >> $GITHUB_ENV
          echo "DYLD_FALLBACK_LIBRARY_PATH=$LLVM_PREFIX/lib" >> $GITHUB_ENV
      - name: Run tests
        env:
          LIBCLANG_PATH: ${{ runner.os == 'Linux' && '/usr/lib/x86_64-linux-gnu' || '' }}
        run: cargo test --all --verbose
      - name: Run tests with all features
        env:
          LIBCLANG_PATH: ${{ runner.os == 'Linux' && '/usr/lib/x86_64-linux-gnu' || '' }}
        run: cargo test --all --all-features --verbose
      - name: Run doc tests
        env:
          LIBCLANG_PATH: ${{ runner.os == 'Linux' && '/usr/lib/x86_64-linux-gnu' || '' }}
        run: cargo test --doc --all

  coverage:
    name: Code Coverage
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions-rust-lang/setup-rust-toolchain@v1
      - name: Install LLVM and libclang
        run: |
          sudo apt-get update
          sudo apt-get install -y llvm-14 llvm-14-dev libclang-14-dev clang-14
          # Create unversioned symlinks for clang-sys auto-discovery
          sudo update-alternatives --install /usr/bin/llvm-config llvm-config /usr/bin/llvm-config-14 100
          sudo update-alternatives --install /usr/bin/clang clang /usr/bin/clang-14 100
          # Verify installation
          llvm-config --version
          llvm-config --libdir
          ldconfig -p | grep libclang
      - name: Install tarpaulin
        env:
          LIBCLANG_PATH: /usr/lib/x86_64-linux-gnu
        run: cargo install cargo-tarpaulin
      - name: Generate coverage
        env:
          LIBCLANG_PATH: /usr/lib/x86_64-linux-gnu
        run: cargo tarpaulin --all --out xml --timeout 600
      - name: Upload to codecov.io
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          fail_ci_if_error: false

  build:
    name: Build
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        target:
          - x86_64-unknown-linux-gnu
          - x86_64-apple-darwin
          - aarch64-apple-darwin
          - x86_64-pc-windows-msvc
        exclude:
          - os: ubuntu-latest
            target: x86_64-apple-darwin
          - os: ubuntu-latest
            target: aarch64-apple-darwin
          - os: ubuntu-latest
            target: x86_64-pc-windows-msvc
          - os: macos-latest
            target: x86_64-unknown-linux-gnu
          - os: macos-latest
            target: x86_64-pc-windows-msvc
          - os: windows-latest
            target: x86_64-unknown-linux-gnu
          - os: windows-latest
            target: x86_64-apple-darwin
          - os: windows-latest
            target: aarch64-apple-darwin
    steps:
      - uses: actions/checkout@v4
      - uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          target: ${{ matrix.target }}
      - name: Install LLVM and libclang (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y llvm-14 llvm-14-dev libclang-14-dev clang-14
          # Create unversioned symlinks for clang-sys auto-discovery
          sudo update-alternatives --install /usr/bin/llvm-config llvm-config /usr/bin/llvm-config-14 100
          sudo update-alternatives --install /usr/bin/clang clang /usr/bin/clang-14 100
          # Verify installation
          llvm-config --version
          ldconfig -p | grep libclang
      - name: Install LLVM (macOS)
        if: runner.os == 'macOS'
        shell: bash
        run: |
          brew install llvm
          LLVM_PREFIX="$(brew --prefix llvm)"
          echo "LLVM_CONFIG_PATH=$LLVM_PREFIX/bin/llvm-config" >> $GITHUB_ENV
          echo "LIBCLANG_PATH=$LLVM_PREFIX/lib" >> $GITHUB_ENV
          echo "DYLD_FALLBACK_LIBRARY_PATH=$LLVM_PREFIX/lib" >> $GITHUB_ENV
      - name: Install LLVM (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          choco install llvm -y
          echo "LIBCLANG_PATH=C:\Program Files\LLVM\bin" >> $env:GITHUB_ENV
      - name: Build
        env:
          LIBCLANG_PATH: ${{ runner.os == 'Linux' && '/usr/lib/x86_64-linux-gnu' || '' }}
        run: cargo build --release --target ${{ matrix.target }}
      - name: Build all crates
        env:
          LIBCLANG_PATH: ${{ runner.os == 'Linux' && '/usr/lib/x86_64-linux-gnu' || '' }}
        run: cargo build --all --release --target ${{ matrix.target }}

  security:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions-rust-lang/setup-rust-toolchain@v1
      - name: Install cargo-audit
        run: cargo install cargo-audit
      - name: Run security audit
        run: cargo audit

  unused-deps:
    name: Check Unused Dependencies
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions-rust-lang/setup-rust-toolchain@v1
      - name: Install cargo-machete
        run: cargo install cargo-machete
      - name: Check unused dependencies
        run: cargo machete

  release:
    name: Release Build
    if: startsWith(github.ref, 'refs/tags/')
    needs: [check, test, security]
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact: talaria-linux-x86_64
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact: talaria-darwin-x86_64
          - os: macos-latest
            target: aarch64-apple-darwin
            artifact: talaria-darwin-aarch64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact: talaria-windows-x86_64.exe
    steps:
      - uses: actions/checkout@v4
      - uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          target: ${{ matrix.target }}
      - name: Install LLVM and libclang (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y llvm-14 llvm-14-dev libclang-14-dev clang-14
          # Create unversioned symlinks for clang-sys auto-discovery
          sudo update-alternatives --install /usr/bin/llvm-config llvm-config /usr/bin/llvm-config-14 100
          sudo update-alternatives --install /usr/bin/clang clang /usr/bin/clang-14 100
          # Verify installation
          llvm-config --version
          llvm-config --libdir
          ldconfig -p | grep libclang
      - name: Install LLVM (macOS)
        if: runner.os == 'macOS'
        shell: bash
        run: |
          brew install llvm
          LLVM_PREFIX="$(brew --prefix llvm)"
          echo "LLVM_CONFIG_PATH=$LLVM_PREFIX/bin/llvm-config" >> $GITHUB_ENV
          echo "LIBCLANG_PATH=$LLVM_PREFIX/lib" >> $GITHUB_ENV
          echo "DYLD_FALLBACK_LIBRARY_PATH=$LLVM_PREFIX/lib" >> $GITHUB_ENV
      - name: Install LLVM (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          choco install llvm -y
          echo "LIBCLANG_PATH=C:\Program Files\LLVM\bin" >> $env:GITHUB_ENV
      - name: Build release
        env:
          LIBCLANG_PATH: ${{ runner.os == 'Linux' && '/usr/lib/x86_64-linux-gnu' || '' }}
        run: cargo build --release --target ${{ matrix.target }}
      - name: Package release
        shell: bash
        run: |
          cd target/${{ matrix.target }}/release
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            7z a ../../../${{ matrix.artifact }}.zip talaria.exe
          else
            tar czf ../../../${{ matrix.artifact }}.tar.gz talaria
          fi
      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.artifact }}
          path: ${{ matrix.artifact }}.*